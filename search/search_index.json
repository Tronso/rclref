{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the rclref develoment site rclref is a reference implementation of a key-value store built on riak-core-lite. rclref was created as part of Google Summer of Code 2020 with the aim of exercising various APIs of riak-core-lite with documented support. Development languages and tools The code is fully written in Erlang OTP > 21. License rclref is released under Apache License, Version 2.0 Table of Cotents","title":"Welcome to the rclref develoment site"},{"location":"#welcome-to-the-rclref-develoment-site","text":"rclref is a reference implementation of a key-value store built on riak-core-lite. rclref was created as part of Google Summer of Code 2020 with the aim of exercising various APIs of riak-core-lite with documented support.","title":"Welcome to the rclref develoment site"},{"location":"#development-languages-and-tools","text":"The code is fully written in Erlang OTP > 21.","title":"Development languages and tools"},{"location":"#license","text":"rclref is released under Apache License, Version 2.0","title":"License"},{"location":"#table-of-cotents","text":"","title":"Table of Cotents"},{"location":"API/","text":"rclref_client Module rclref_client Module Summary Basic functions for manipulating rclref Description This module provides basic funcitons for reading data from and storing data into rclref, a key-value store on riak-core-lite. put(Key, Value) put(Key, Value, Options) get(Key) get(Key, Options) delete(Key) delete(Key, Options) reap_tombs(Key) reap_tombs(Key, Options) put(Key, Value) -spec put(rclref_object:key(), rclref_object:value()) -> ok | {error, timeout} | {error, partial} | {error, term()}. This is equal to rclref_put(Key, Value, []) put(Key, Value, Options) -spec put(rclref_object:key(), rclref_object:value(), [term()]) -> ok | {error, timeout} | {error, partial} | {error, term()}. store a Key-Value in N vnodes. When W vnodes respond with ok or more than N-W number of vnodes respond with an error, this function will return. If neither of these is satisified within TIMEOUT_PUT, then this function will return {error, timeout} Returns ok when W vnodes respond with ok. Returns {error, partial} when at least one of the vnodes (but not more than or equal to W vnodes) responds with ok before getting errors from more than N-W vnodes. Returns {error, [Reason]} when no vnodes respond with ok and more than N-W vnodes respond with an error. [Reason] is a list that contains error reasons of N-W+1 vnodes. Returns {error, timeout} when neither of these above are satisfied within TIMEOUT_PUT milliseconds. get(Key) -spec get(rclref_object:key()) -> {ok, [rclref_object:value()]} | {error, timeout} | {error, partial} | {error, not_found} | {error, term()}. This is equal to get(Key, Value, Options) . get(Key, Options) -spec get(rclref_object:key(), [term()]) -> {ok, [rclref_object:value()]} | {error, timeout} | {error, partial} | {error, not_found} | {error, term()}. get a Key-Value from N vnodes. When R number of vnodes respond with ok or more than N-R number of vnodes respond with an error, this fucntion will return. If neither of these is satisified with TIMEOUT_GET, then this function will return {error, timeout} On get, response from a vnode will be the either of {ok, RObj} , {error, not_found} , {error, Reason} Returns {ok, [Value]} when R vnodes respond with a value. [Value] is a list that contains values from R vnodes. Returns {error, partial} when at least one of the vnodes (but not more than or equal to R vnodes) responds with a value before getting errors from more than N-R vnodes. Returns {error, not_found} when no vnodes respond with a value and more than N-R vnodes respond with a error which are all not_found. Returns {error, [Reason]} when no vnodes respond with a value and more than N-R vnodes respond with a error which are not all not_found. [Reason] is a list that contains error reasons of N-R+1 vnodes. Returns {error, timeout} when neither of these above is satisified within TIMEOUT_GET milliseconds. delete(Key) -spec delete(rclref_object:key()) -> ok | {error, timeout} | {error, partial} | {error, term()}. This is equal to delete(Key, []) . delete(Key, Options) -spec delete(rclref_object:key(), [term()]) -> ok | {error, timeout} | {error, partial} | {error, term()}. This is equal to put(Key, undefined, Options) . Note that this will not delete the Key from the backend, however rclref_client:get(Key) will return {error, not_found} after calling this function. The reason why this is implemeted this way is explained in the [TODO] section. A Key-Value with an undefined value is called a tombstone. list_keys() -spec list_keys() -> {ok, [rclref_object:key()]}. This is equal to list_keys([]) . list_keys(Options) -spec list_keys([term()]) -> {ok, [rclref_object:key()]}. list all unique keys in the backend.","title":"rclref_client"},{"location":"API/#rclref_client","text":"","title":"rclref_client"},{"location":"API/#module","text":"rclref_client","title":"Module"},{"location":"API/#module-summary","text":"Basic functions for manipulating rclref","title":"Module Summary"},{"location":"API/#description","text":"This module provides basic funcitons for reading data from and storing data into rclref, a key-value store on riak-core-lite. put(Key, Value) put(Key, Value, Options) get(Key) get(Key, Options) delete(Key) delete(Key, Options) reap_tombs(Key) reap_tombs(Key, Options)","title":"Description"},{"location":"API/#putkey-value","text":"-spec put(rclref_object:key(), rclref_object:value()) -> ok | {error, timeout} | {error, partial} | {error, term()}. This is equal to rclref_put(Key, Value, [])","title":"put(Key, Value)"},{"location":"API/#putkey-value-options","text":"-spec put(rclref_object:key(), rclref_object:value(), [term()]) -> ok | {error, timeout} | {error, partial} | {error, term()}. store a Key-Value in N vnodes. When W vnodes respond with ok or more than N-W number of vnodes respond with an error, this function will return. If neither of these is satisified within TIMEOUT_PUT, then this function will return {error, timeout} Returns ok when W vnodes respond with ok. Returns {error, partial} when at least one of the vnodes (but not more than or equal to W vnodes) responds with ok before getting errors from more than N-W vnodes. Returns {error, [Reason]} when no vnodes respond with ok and more than N-W vnodes respond with an error. [Reason] is a list that contains error reasons of N-W+1 vnodes. Returns {error, timeout} when neither of these above are satisfied within TIMEOUT_PUT milliseconds.","title":"put(Key, Value, Options)"},{"location":"API/#getkey","text":"-spec get(rclref_object:key()) -> {ok, [rclref_object:value()]} | {error, timeout} | {error, partial} | {error, not_found} | {error, term()}. This is equal to get(Key, Value, Options) .","title":"get(Key)"},{"location":"API/#getkey-options","text":"-spec get(rclref_object:key(), [term()]) -> {ok, [rclref_object:value()]} | {error, timeout} | {error, partial} | {error, not_found} | {error, term()}. get a Key-Value from N vnodes. When R number of vnodes respond with ok or more than N-R number of vnodes respond with an error, this fucntion will return. If neither of these is satisified with TIMEOUT_GET, then this function will return {error, timeout} On get, response from a vnode will be the either of {ok, RObj} , {error, not_found} , {error, Reason} Returns {ok, [Value]} when R vnodes respond with a value. [Value] is a list that contains values from R vnodes. Returns {error, partial} when at least one of the vnodes (but not more than or equal to R vnodes) responds with a value before getting errors from more than N-R vnodes. Returns {error, not_found} when no vnodes respond with a value and more than N-R vnodes respond with a error which are all not_found. Returns {error, [Reason]} when no vnodes respond with a value and more than N-R vnodes respond with a error which are not all not_found. [Reason] is a list that contains error reasons of N-R+1 vnodes. Returns {error, timeout} when neither of these above is satisified within TIMEOUT_GET milliseconds.","title":"get(Key, Options)"},{"location":"API/#deletekey","text":"-spec delete(rclref_object:key()) -> ok | {error, timeout} | {error, partial} | {error, term()}. This is equal to delete(Key, []) .","title":"delete(Key)"},{"location":"API/#deletekey-options","text":"-spec delete(rclref_object:key(), [term()]) -> ok | {error, timeout} | {error, partial} | {error, term()}. This is equal to put(Key, undefined, Options) . Note that this will not delete the Key from the backend, however rclref_client:get(Key) will return {error, not_found} after calling this function. The reason why this is implemeted this way is explained in the [TODO] section. A Key-Value with an undefined value is called a tombstone.","title":"delete(Key, Options)"},{"location":"API/#list_keys","text":"-spec list_keys() -> {ok, [rclref_object:key()]}. This is equal to list_keys([]) .","title":"list_keys()"},{"location":"API/#list_keysoptions","text":"-spec list_keys([term()]) -> {ok, [rclref_object:key()]}. list all unique keys in the backend.","title":"list_keys(Options)"},{"location":"Usage/","text":"Usage Erlang interface (rclref@127.0.0.1)1> rclref_client:get(<<\"dog\">>). {error,not_found} (rclref@127.0.0.1)2> rclref_client:put(<<\"dog\">>, <<\"cat\">>). ok (rclref@127.0.0.1)7> rclref_client:get(<<\"dog\">>). {ok,[<<\"cat\">>,<<\"cat\">>,<<\"cat\">>]} (rclref@127.0.0.1)2> rclref_client:list_keys(). {ok,[<<\"dog\">>]} (rclref@127.0.0.1)8> rclref_client:delete(<<\"dog\">>). ok (rclref@127.0.0.1)8> rclref_client:get(<<\"dog\">>). {error,not_found} HTTP interface Get a Key-Value with key = dog | => curl -X GET http://localhost:8080/rclref/dog { \"error\": { \"code\": 404, \"reason\": \"not_found\" } } Store a Key-Value with key = dog, value = cat | => curl -X POST http://localhost:8080/rclref/dog -d 'cat' { \"ok\": { \"code\": 200 } } Get a Key-Value with key = dog | => curl -X GET http://localhost:8080/rclref/dog { \"ok\": { \"code\": 200, \"values\": [ \"cat\", \"cat\", \"cat\" ] } } Delete a Key-Value with key = dog. (Internally, this will not delete the value but leave it as a tombstone) | => curl -X DELETE http://localhost:8080/rclref/dog { \"ok\": { \"code\": 200 } } Get a Key-Value with key = dog. Note that tombstones are not observable. | => curl -X GET http://localhost:8080/rclref/dog { \"error\": { \"code\": 404, \"reason\": \"not_found\" } }","title":"Usage"},{"location":"Usage/#usage","text":"","title":"Usage"},{"location":"Usage/#erlang-interface","text":"(rclref@127.0.0.1)1> rclref_client:get(<<\"dog\">>). {error,not_found} (rclref@127.0.0.1)2> rclref_client:put(<<\"dog\">>, <<\"cat\">>). ok (rclref@127.0.0.1)7> rclref_client:get(<<\"dog\">>). {ok,[<<\"cat\">>,<<\"cat\">>,<<\"cat\">>]} (rclref@127.0.0.1)2> rclref_client:list_keys(). {ok,[<<\"dog\">>]} (rclref@127.0.0.1)8> rclref_client:delete(<<\"dog\">>). ok (rclref@127.0.0.1)8> rclref_client:get(<<\"dog\">>). {error,not_found}","title":"Erlang interface"},{"location":"Usage/#http-interface","text":"Get a Key-Value with key = dog | => curl -X GET http://localhost:8080/rclref/dog { \"error\": { \"code\": 404, \"reason\": \"not_found\" } } Store a Key-Value with key = dog, value = cat | => curl -X POST http://localhost:8080/rclref/dog -d 'cat' { \"ok\": { \"code\": 200 } } Get a Key-Value with key = dog | => curl -X GET http://localhost:8080/rclref/dog { \"ok\": { \"code\": 200, \"values\": [ \"cat\", \"cat\", \"cat\" ] } } Delete a Key-Value with key = dog. (Internally, this will not delete the value but leave it as a tombstone) | => curl -X DELETE http://localhost:8080/rclref/dog { \"ok\": { \"code\": 200 } } Get a Key-Value with key = dog. Note that tombstones are not observable. | => curl -X GET http://localhost:8080/rclref/dog { \"error\": { \"code\": 404, \"reason\": \"not_found\" } }","title":"HTTP interface"}]}